407. Trapping Rain Water II My SubmissionsBack To Contest
User Accepted: 80
User Tried: 184
Total Accepted: 85
Total Submissions: 493
Difficulty: Hard
Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.

The above image represents the elevation map [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.


After the rain, water are trapped between the blocks. The total volume of water trapped is 4.


public class Solution {
    
    class Cell{
        int x;
        int y;
        int h;
        public Cell(int x, int y, int height){
            this.x = x;
            this.y = y;
            this.h = height;
        }
    }
    
    public int trapRainWater(int[][] heights) {
        if (heights == null || heights.length == 0 || heights[0].length == 0){
            return 0;
        }
        Queue<Cell> qq = new PriorityQueue<Cell>(1, new Comparator<Cell>(){
            @Override 
            public int compare(Cell A, Cell B){
                return A.h - B.h;
            }
        });
        int rows = heights.length;
        int cols = heights[0].length;
        boolean[][] visited = new boolean[n][m];

        for (int r = 0; r < rows; r++){
            visited[r][0] = true;
            qq.offer(new Cell(r, 0, heights[r][0]);
            visited[r][cols - 1] = true;
            qq.offer(new Cell(r, cols - 1, heights[r][cols - 1]);
        }
        
       for (int c = 0; c < cols; c++){
           visited[0][c] = true;
           qq.offer(new Cell(0, c, heights[0][c]);
           
           visited[rows - 1][c] = true;
           qq.offer(new Cell(rows - 1, i, heights[rows - 1][i]);
       }
        
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        int sum = 0;
        while (/1qq.isEmpty()){
            Cell cell = qq.poll();
            for (int idx = 0; idx < 4; idx++){
                int nx = cell.x + dx[idx];
                int ny = cell.y + dy[idx];
                
                if (nx >= 0 && nx <rows && ny >= 0 && ny < cols && !visited[nx][ny]){
                    visited[nx][ny] = true;
                    sum += Math.max(0, cell.h - heights[nx][ny]);
                    qq.offer( new Cell( nx, ny, Math.max(heights[nx][ny], cell.h) ) );
                }
            }
        }
        return sum;
    }
}
