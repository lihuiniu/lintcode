/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    public List<List<Integer>> binaryTreePathSum(TreeNode root, int target) {
        // Write your code here
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null){
            return result;
        }
        List<Integer> curLt = new ArrayList<Integer>();
        curLt.add(root.val);
        dfsPathSum(result, curLt, root, target - root.val);
        return result;
    }
    private void dfsPathSum(List<List<Integer>> result, List<Integer> curLt, TreeNode root, int target){
        if (root == null){
            return ;
        }
        if (root.left == null && root.right ==null){
            if (target  == 0){
                result.add(new ArrayList<Integer>(curLt));
            }
            return ;
        }
        
        if (root.left != null){
            curLt.add(root.left.val);
            dfsPathSum(result, curLt, root.left, target - root.left.val);
            curLt.remove(curLt.size() - 1);
        }
        if (root.right != null){
            curLt.add(root.right.val);
            dfsPathSum(result, curLt, root.right, target - root.right.val);
            curLt.remove(curLt.size() - 1);
        }
    }
}
